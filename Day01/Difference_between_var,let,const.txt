In JavaScript, `var`, `let`, and `const` are used for variable declaration, 
but they have different characteristics and scopes. Here's a breakdown of the key differences between them:

**1. Scope:**
- `var`: Variables declared with `var` have function-level scope. This means they are accessible throughout 
the entire function in which they are declared, regardless of block scopes.
- `let` and `const`: Variables declared with `let` and `const` have block-level scope. 
They are only accessible within the nearest enclosing curly braces `{}` (block) in which they are declared. 
This makes them more predictable and less prone to unexpected behavior.

```javascript
function example() {
  if (true) {
    var x = 10; // 'x' is accessible throughout the function
    let y = 20; // 'y' is only accessible within this 'if' block
  }
  console.log(x); // 10
  console.log(y); // ReferenceError: y is not defined
}
```

**2. Hoisting:**
- `var`: Variables declared with `var` are hoisted to the top of their containing function or global scope. This means you can access and use them before they are declared in the code. However, their values are `undefined` until they are assigned.
- `let` and `const`: Variables declared with `let` and `const` are also hoisted, but they are not initialized with `undefined`. Trying to access them before declaration results in a `ReferenceError`.

```javascript
console.log(a); // undefined
var a = 10;

console.log(b); // ReferenceError: b is not defined
let b = 20;
```

**3. Reassignment:**
- `var`: Variables declared with `var` can be redeclared and reassigned within the same scope without any errors.

```javascript
var x = 5;
var x = 10; // This is allowed, and 'x' is reassigned.
```

- `let`: Variables declared with `let` cannot be redeclared in the same scope, but they can be reassigned.

```javascript
let y = 5;
let y = 10; // SyntaxError: Identifier 'y' has already been declared

let z = 15;
z = 20;     // This is allowed, and 'z' is reassigned.
```

- `const`: Variables declared with `const` cannot be redeclared or reassigned after their initial value is assigned. They are constants.

```javascript
const PI = 3.14;
PI = 3.14159; // TypeError: Assignment to a constant variable
```

**4. Temporal Dead Zone (TDZ):**
- `let` and `const` are subject to the concept of the Temporal Dead Zone (TDZ). Variables declared with `let` and `const` are not accessible before their declaration point in the code, which helps catch potential issues with accessing uninitialized variables.

```javascript
console.log(x); // ReferenceError: Cannot access 'x' before initialization
let x = 10;
```

In modern JavaScript, it's generally recommended to use `let` and `const` over `var` due to their block-level scope, lack of hoisting-related surprises, and the ability to create constants. Use `const` when you want to declare variables that shouldn't be reassigned, and use `let` when you need reassignable variables with block-level scope.