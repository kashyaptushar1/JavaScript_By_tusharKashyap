In JavaScript, variables are used to store and manage data. They act as containers for holding values, which can be of various 
types, such as numbers, text, objects, or functions. Variables are essential for working with data in JavaScript and play a fundamental role in programming. Here's how you declare and use variables in JavaScript:

**1. Variable Declaration:**
To declare a variable in JavaScript, you can use one of the three keywords: `var`, `let`, or `const`. Each has slightly different characteristics:

- `var`: Historically used for variable declaration, but it has some scoping issues and is less commonly used in modern JavaScript.
- `let`: Introduced in ES6 (ECMAScript 2015) and widely used for declaring variables with block-level scope.
- `const`: Also introduced in ES6, used for declaring constants whose values should not change after assignment.

Here are examples of variable declarations with `let` and `const`:

```javascript
let age = 25;      // Declaring a variable 'age' with the value 25
const PI = 3.14;   // Declaring a constant 'PI' with the value 3.14
```

**2. Variable Assignment:**
You can assign values to variables using the assignment operator `=`:

```javascript
let name = "John";   // Assigning a string value to the 'name' variable
let count = 10;      // Assigning a number to the 'count' variable
```

**3. Variable Types:**
JavaScript is dynamically typed, which means that variables can hold values of different types during their lifetime. For example:

```javascript
let message = "Hello, World!"; // 'message' holds a string
message = 42;                  // 'message' now holds a number
```

**4. Variable Scope:**
The scope of a variable determines where it is accessible in your code. Variables declared with `var` have function-level scope, while those declared with `let` and `const` have block-level scope. Block-level scope means the variable is only accessible within the block where it's declared.

```javascript
function example() {
  var x = 10;  // 'x' is accessible within the function
}

console.log(x); // This will result in an error because 'x' is not defined here
```

**5. Variable Naming Rules:**
- Variable names are case-sensitive (`myVar` is different from `myvar`).
- Variable names can consist of letters, digits, underscores, or dollar signs.
- Variable names must start with a letter, underscore, or dollar sign (not a digit).
- JavaScript has reserved keywords that cannot be used as variable names (e.g., `let`, `const`, `if`, `function`).

**6. Variable Best Practices:**
- Use `const` by default for variables that shouldn't be reassigned. Use `let` for variables that will change their value.
- Use descriptive variable names to make your code more readable.
- Declare and initialize variables before using them to avoid unexpected behavior.

Here's a summary of variable declaration and assignment in JavaScript using `let` and `const`, which are recommended for modern JavaScript development:

```javascript
let age = 25;       // Declare and initialize a variable with 'let'
const PI = 3.14;    // Declare and initialize a constant with 'const'
let message;        // Declare a variable without initializing it
message = "Hello";  // Assign a value to the variable 'message'
```

These are the basics of working with variables in JavaScript, which are essential for manipulating data and building dynamic applications.